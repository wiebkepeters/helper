# -*- coding: utf-8 -*-
"""NN_Foundations_helper.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_QG3zbR0om8aoZi0VR2mgrEUBe2KZAuE
"""

def plot_activation_functions(type="sigmoid"):
  import numpy as np
  from matplotlib import pyplot as plt
  n = 100
    # todo maybe change z notation to not overwrite or manual function, i.e. z_example or sth
    # explain no.linespace 
  z=np.linspace(start=-5, stop=5, num=n)

  if type == "sigmoid":
    def sigmoid(z):
      return 1.0 / (1.0 + np.exp(-z))

    def sigmoid_prime(z):
      return sigmoid(z) * (1.0 - sigmoid(z))
    plt.plot(z, sigmoid(z), 'b-', label="g(z)")
    plt.plot(z, sigmoid_prime(z), 'r-', label="g'(z)")
    plt.legend(loc='best')
    plt.grid(True)
    plt.xlabel('z')
    plt.ylabel('g(z)')
    plt.show()
  
  if type == "tanh":
    def tanh(z):
      return np.tanh(z)
    def tanh_prime(z):
      return 1.0 - np.tanh(z) ** 2
    plt.plot(z, tanh(z), 'b-', label="g(z)")
    plt.plot(z, tanh_prime(z), 'r-', label="g'(z)")
    plt.legend(loc='best')
    plt.grid(True)
    plt.xlabel('z')
    plt.ylabel('g(z)')
    plt.show()

  if type == "relu":
    def relu(z):
      return np.maximum(z,0)
    def relu_prime(z):
      z[z <= 0] = 0
      z[z > 0] = 1
      return z
    some_var=np.linspace(start=-5, stop=5, num=n)
    g=np.maximum(0, some_var)
    d=(g>1).astype(int)
    plt.plot(z, np.maximum(0, z), 'b-', label="g(z)")
    plt.plot(z, (g>1).astype(int), 'r-', label="g'(z)")
    plt.legend(loc='best')
    plt.grid(True)
    plt.xlabel('z')
    plt.ylabel('g(z)')
    plt.show()